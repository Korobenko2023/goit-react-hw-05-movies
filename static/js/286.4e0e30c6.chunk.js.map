{"version":3,"file":"static/js/286.4e0e30c6.chunk.js","mappings":"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","sources":["components/MovieCard/MovieCard.js","Pages/MovieDetails/MovieDetails.js","components/Services/Api.js"],"sourcesContent":["import { Link } from \"react-router-dom\";\n\n\nexport const MovieCard = ({ description: { poster_path, \n    title,\n    vote_average,\n    overview,\n    genres,} }) => {\n\n  const imgPost = `https://image.tmdb.org/t/p/original/${poster_path}`;\n  const defaultImg =\n    'https://image.tmdb.org/t/p/original//nQvoM7BMswq1raENOkOjCBt94gk.jpg';\n\n    return (\n        <>\n           <img\n              src={poster_path ? imgPost : defaultImg}\n              width={250}\n              alt=\"постер\"\n            />;\n           \n    \n            <h1>{title}</h1>\n        <p>Rating: {Math.round(vote_average)}</p>\n        <h2>Overview</h2>\n        <p>{overview}</p>\n        <h3>Genres</h3>\n        <ul>\n            {genres?.map(genre => (\n              <li key={genre.id}>{genre.name}</li>\n            ))}\n        </ul>\n           <h2>Additional information</h2>\n            <ul>\n              <li>\n                <Link to=\"cast\">Cast</Link>\n              </li>\n              <li>\n                 <Link to=\"reviews\">Reviews</Link>\n              </li>\n            </ul>\n        </>\n    )\n};\n","import { Loader } from \"components/Loader/Loader\";\nimport { fetchMovieDetails } from \"components/Services/Api\";\nimport { Suspense, useEffect, useRef, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { Link, Outlet, useLocation, useParams } from \"react-router-dom\";\nimport { GoArrowLeft } from \"react-icons/go\";\nimport { MovieCard } from \"components/MovieCard/MovieCard\";\n\nexport default function MovieDetails() {\n    const [movieDescription, setMovieDescription] = useState({});\n    const {movieId} = useParams();\n    const [isLoading, setIsLoading] = useState(false);\n    const location = useLocation();\n    const backLink = useRef(location.state?.from ?? '/');\n\n    useEffect(() => {\n         if (!movieId) {\n            return;\n          }\n\n        const detailsFilm = async () => {\n\n              setIsLoading(true);\n\n            try {\n                const { results } = await fetchMovieDetails(movieId);\n               \n                setMovieDescription(results);\n            } catch (error) {\n                toast.error('Oops! Something went wrong. Please try again later.', error);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n   \n        detailsFilm();\n    \n    }, [movieId]);\n    console.log(movieDescription)\n\n    return (\n        <div>\n            <Link to={backLink.current}><GoArrowLeft />Go back</Link>           \n            <MovieCard description={movieDescription} />\n            {isLoading && <Loader />}\n            <Suspense fallback={<Loader />}>\n                <Outlet />\n            </Suspense>          \n        </div>);\n};\n\n","import axios from \"axios\";\n axios.defaults.baseURL = 'https://api.themoviedb.org/3';\n const API_KEY = 'da8b391557d6a67d7aa1304dede81c1a';\nexport const fetchTrendingMovies = async () => {   \n    try {\n        const params = {\n            api_key: API_KEY,\n            language: 'en-US',\n        };\n        const { data } = await axios.get(`/trending/all/day`, { params });\n        console.log(data)\n     return data;\n    } catch (error) {\n        throw error;\n    }   \n}\n\nexport const fetchMovies = async (query) => {   \n    try {\n        const params = {\n            api_key: API_KEY,\n            query: query,\n            include_adult: false,\n            language: 'en-US',\n            page: 1,\n        };\n        const { data } = await axios.get(`/search/movie`, { params });\n     return data;\n    } catch (error) {\n        throw error;\n    }   \n}\n\nexport const fetchMovieDetails = async (movieId) => {\n    try {\n        const params = {\n            api_key: API_KEY,\n            language: 'en-US',\n        };\n        const { data } = await axios.get(`/movie/${movieId}`, { params });\n     return data;\n    } catch (error) {\n        throw error;\n    }\n}\n\nexport const fetchMovieCast = async (movieId) => {   \n    try {\n        const params = {\n            api_key: API_KEY,           \n            language: 'en-US',\n        };\n        const { data } = await axios.get(`/movie/${movieId}/credits`, { params });\n     return data;\n    } catch (error) {\n        throw error;\n    }   \n}\n\nexport const fetchMovieReviews = async (movieId) => {   \n    try {\n        const params = {\n            api_key: API_KEY,           \n            language: 'en-US',\n            page: 1,\n        };\n        const { data } = await axios.get(`/movie/${movieId}/reviews`, { params });\n     return data;\n    } catch (error) {\n        throw error;\n    }   \n}\n\n\n\n"],"names":["MovieCard","_ref","description","poster_path","title","vote_average","overview","genres","imgPost","concat","_jsxs","_Fragment","children","_jsx","src","width","alt","Math","round","map","genre","name","id","Link","to","MovieDetails","_location$state$from","_location$state","movieDescription","setMovieDescription","useState","movieId","useParams","isLoading","setIsLoading","location","useLocation","backLink","useRef","state","from","useEffect","async","results","fetchMovieDetails","error","toast","detailsFilm","console","log","current","GoArrowLeft","Loader","Suspense","fallback","Outlet","axios","API_KEY","fetchTrendingMovies","params","api_key","language","data","fetchMovies","query","include_adult","page"],"sourceRoot":""}